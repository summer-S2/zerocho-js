프로그램 절차 !
1. 프로그램 절차의 개수는 정해져 있어야 한다
2. 각 절차는 항상 같은 내용이어야 한다. => 구체적이기보다는 넓은 용어
3. 모든 가능성을 고려해야 한다.
4. 예시는 절차를 검증하는 데 사용한다.


* 사용자로부터 값을 입력받을때는 입력 형식이 맞는지 먼저 확인이 필요


javascript 문법
콜백함수 : 어떤 동작을 실행하고난뒤에 연이어 실행되는 함수
블록스코프 : {}안에서만 접근 가능 -> let
함수스코프 : f()안에서만 접근 가능 -> var 
클로저 : 


prompt(''); : 사용자로부터 문자열 값을 입력받는다.
alert(''); : 경고메시지를 띄운다
confirm(''); : 사용자로부터 Yes/No 값을 입력받는다.
.addEventListener('이벤트명', 함수); *함수자리에 함수()로 입력하면 리턴값이 들어가므로 주의*
Math.random() : 0 <= x < 1 사이 값 랜덤으로 출력
Math.floor() : 내림
Math.ceil() : 올림
Math.round() : 반올림
.join('') : 배열의 값들 사이에 ''을 넣어서 리턴

.indexOf(값) : 호출한 String 객체에서 주어진 값과 일치하는 첫 번째 인덱스를 반환합니다. 일치하는 값이 없으면 -1을 반환합니다.
.includes(값) : 주어진 값과 일치하는 값이 있으면 true, 없으면 flase
    indexOf와 includes 비교
    '2345'.indexOf(3) === 1;
    '2345'.includes(3) === true;

     *주의 : 요소의 자료형까지 같아야 함
     ['2', '3', '4', '5'].indexOf('5') === 3;
     ['2', '3', '4', '5'].indexOf(5) === -1;
     ['2', '3', '4', '5'].includes(5) === false;

배열.map((element, index) => {}) : 배열을 순회하며 각각의 값에 함수 실행
배열.fill() : 배열을 ()값으로 채움
배열.forEach((element, index) => {}) : 인수로 함수를 받고 배열의 요소 하나하나에 인수로 받은 함수를 각각 적용.
.slice(시작인덱스, 끝인덱스); : 시작인덱스부터 끝인덱스-1 까지 리턴 -> 원본은 유지
.splice(시작인덱스, 갯수); : 값을 새로운 array로 리턴 -> 원본에도 반영
array.sort((a, b)=> {
    return a - b; 오름차순 -> 원본에도 반영
    return b - a; 내림차순
})

# 원본유지하면서 정렬하기
array.slice().sort((a, b) => a - b);
array.sort((a, b) => a.localeCompare(b)); : 문자열 사전순으로 오름차순 정렬

setTimeout(함수, 밀리초) : 밀리초후에 함수 실행